// <auto-generated />
using System;
using ECommerceAppBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceAppBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceAppBackend.Models.ItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopCartModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ShopCartModelId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Apple iPhone 13",
                            InStock = 88,
                            Name = "Amazon Echo Dot",
                            Price = 147.97,
                            SerialNumber = "332690"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Google Nest Thermostat",
                            InStock = 52,
                            Name = "Samsung Smart TV",
                            Price = 2.1899999999999999,
                            SerialNumber = "451389"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for HP LaserJet Printer",
                            InStock = 75,
                            Name = "Apple iPhone 13",
                            Price = 208.72,
                            SerialNumber = "725262"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Bose Soundbar",
                            InStock = 32,
                            Name = "JBL Portable Bluetooth Speaker",
                            Price = 711.99000000000001,
                            SerialNumber = "209950"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Fitbit Versa Smartwatch",
                            InStock = 30,
                            Name = "Sony Noise Cancelling Headphones",
                            Price = 27.899999999999999,
                            SerialNumber = "676120"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description for Logitech Mouse Pro",
                            InStock = 54,
                            Name = "Nintendo Switch",
                            Price = 842.89999999999998,
                            SerialNumber = "531479"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description for GoPro Hero Action Camera",
                            InStock = 9,
                            Name = "Dell Inspiron Laptop",
                            Price = 381.16000000000003,
                            SerialNumber = "457629"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Description for Sony Noise Cancelling Headphones",
                            InStock = 31,
                            Name = "HP LaserJet Printer",
                            Price = 59.590000000000003,
                            SerialNumber = "863213"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Description for Asus Gaming Mouse",
                            InStock = 2,
                            Name = "Lenovo ThinkPad Laptop",
                            Price = 682.86000000000001,
                            SerialNumber = "321784"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Description for GoPro Hero Action Camera",
                            InStock = 63,
                            Name = "Google Nest Thermostat",
                            Price = 714.41999999999996,
                            SerialNumber = "773948"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Description for Microsoft Surface Pro",
                            InStock = 66,
                            Name = "Asus Gaming Mouse",
                            Price = 287.68000000000001,
                            SerialNumber = "210582"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Description for Fitbit Versa Smartwatch",
                            InStock = 89,
                            Name = "Asus Gaming Mouse",
                            Price = 650.79999999999995,
                            SerialNumber = "455839"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Description for Google Nest Thermostat",
                            InStock = 45,
                            Name = "Lenovo ThinkPad Laptop",
                            Price = 595.29999999999995,
                            SerialNumber = "429858"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Description for Apple iPhone 13",
                            InStock = 47,
                            Name = "Bose Soundbar",
                            Price = 902.94000000000005,
                            SerialNumber = "335696"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Description for Logitech Mouse Pro",
                            InStock = 58,
                            Name = "Dell Inspiron Laptop",
                            Price = 509.29000000000002,
                            SerialNumber = "796690"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Description for Sony Noise Cancelling Headphones",
                            InStock = 31,
                            Name = "Amazon Echo Dot",
                            Price = 955.48000000000002,
                            SerialNumber = "206303"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Description for LG UltraWide Monitor",
                            InStock = 9,
                            Name = "Fitbit Versa Smartwatch",
                            Price = 168.61000000000001,
                            SerialNumber = "836442"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Description for Microsoft Surface Pro",
                            InStock = 2,
                            Name = "Fitbit Versa Smartwatch",
                            Price = 789.41999999999996,
                            SerialNumber = "181930"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Description for Dell Inspiron Laptop",
                            InStock = 9,
                            Name = "Apple iPhone 13",
                            Price = 682.37,
                            SerialNumber = "255013"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Description for Fitbit Versa Smartwatch",
                            InStock = 45,
                            Name = "Dell Inspiron Laptop",
                            Price = 741.98000000000002,
                            SerialNumber = "315586"
                        });
                });

            modelBuilder.Entity("ECommerceAppBackend.Models.ItemProducerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemProducerModel");
                });

            modelBuilder.Entity("ECommerceAppBackend.Models.ItemTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemTypeModel");
                });

            modelBuilder.Entity("ECommerceAppBackend.Models.ShopCartModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("ShopCarts");
                });

            modelBuilder.Entity("ECommerceAppBackend.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ECommerceAppBackend.Models.ItemModel", b =>
                {
                    b.HasOne("ECommerceAppBackend.Models.ItemTypeModel", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId");

                    b.HasOne("ECommerceAppBackend.Models.ItemProducerModel", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.HasOne("ECommerceAppBackend.Models.ShopCartModel", null)
                        .WithMany("ItemsInCart")
                        .HasForeignKey("ShopCartModelId");

                    b.Navigation("ItemType");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("ECommerceAppBackend.Models.ShopCartModel", b =>
                {
                    b.HasOne("ECommerceAppBackend.Models.UserModel", null)
                        .WithMany("CartHistoryList")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("ECommerceAppBackend.Models.UserModel", b =>
                {
                    b.HasOne("ECommerceAppBackend.Models.ShopCartModel", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("ECommerceAppBackend.Models.ShopCartModel", b =>
                {
                    b.Navigation("ItemsInCart");
                });

            modelBuilder.Entity("ECommerceAppBackend.Models.UserModel", b =>
                {
                    b.Navigation("CartHistoryList");
                });
#pragma warning restore 612, 618
        }
    }
}
